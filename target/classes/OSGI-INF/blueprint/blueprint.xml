<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">


<!--  Service definition for Swagger, not used at this point, swagger offers a nice UI to browse and execute REST APIs -->
<service interface="javax.servlet.http.HttpServlet">
        <service-properties>
            <entry key="alias" value="/api-docs/*"/>
            <entry key="init-prefix" value="init."/>
            <entry key="init.base.path" value="//localhost:8080/"/>
            <entry key="init.api.path" value="//localhost:8181/api-docs"/>
            <entry key="init.api.title" value="Rest API"/>
            <entry key="init.api.version" value="1.0"/>
            <entry key="init.api.description"
                value="Demo API"/>
        </service-properties>
        <bean class="org.apache.camel.component.swagger.DefaultCamelSwaggerServlet" />
</service>

<!--  RabbitMQ connection factory configuration. In real life scenario, this should be externalised to configuration files -->
<bean id="customConnectionFactory" class="com.rabbitmq.client.ConnectionFactory">
  <property name="host" value="localhost"/>
  <property name="port" value="5672"/>
  <property name="username" value="guest"/>
  <property name="password" value="guest"/>
</bean>

<!-- Java Class to marshall the JSON message in, currently not used, but handy if transformation and operations on the message are needed -->
<bean id="message" class="org.demo.camel.rabbitmq.Message"/>


<!--  Camel Context for route execution -->
<camelContext xmlns="http://camel.apache.org/schema/blueprint" id="RabbitMQContext">

<!--  JSON to Pojo marshalling tool -->
  <dataFormats>
    <json library="Jackson" unmarshalTypeName="org.demo.camel.rabbitmq.Message" id="jack"/>
  </dataFormats>
  
<!--  Configuration of the REST server, currently using Jetty, many options are possible --> 
  <restConfiguration component="jetty" host="localhost" port="8080"  bindingMode="json"/>
 
<!-- Rest API for this context, currently only 1 operation, could add more easily --> 
  <rest consumes="application/json" produces="application/json">
    <description>Message REST Service</description>
    
   <!--  put operation on the /message path calls direct: endpoint. See route below   --> 
    <put uri="/message" type="org.demo.camel.rabbitmq.Message">
      <description>Send JSON Message to Rabbit MQ</description>
      <to uri="direct:addMessage"/>
    </put>
  </rest>

  <route id="SendToRabbitMQRoute">
    <!-- Route listen to direct endpoint -->
    <from uri="direct:addMessage"/>
    <!-- Pojo to JSON marshalling -->
    <marshal ref="jack"/>
    <log message="MSG: ${body}" loggingLevel="INFO"/>
    <to uri="rabbitmq://localhost/EMPLOYEE?autoAck=true"/>
  </route>
  </camelContext>

</blueprint>
